name: Deploy Django App with Terraform and Docker Compose

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy Django App
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Step 3: Install Python dependencies
      - name: Install Dependencies
        working-directory: ./portfolio_backend
        run: |
          python -m pip install --upgrade pip
          pip install -r ../requirements.txt

      # Step 4: Debug AWS Secrets
      - name: Debug AWS Secrets
        run: |
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "AWS_ACCESS_KEY_ID is not set"
          else
            echo "AWS_ACCESS_KEY_ID is set"
          fi
          if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "AWS_SECRET_ACCESS_KEY is not set"
          else
            echo "AWS_SECRET_ACCESS_KEY is set"
          fi

      # Step 5: Configure AWS credentials for Terraform
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      # Step 6: Install Terraform
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6

      # Step 7: Terraform init, plan, and apply
      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve

      # Step 8: Fetch EC2 Public IP
      - name: Fetch EC2 Public IP
        id: output
        working-directory: ./terraform
        run: |
          terraform output -raw ec2_public_ip
        continue-on-error: false

      - name: Set EC2 IP in GitHub Environment
        run: |
          echo "EC2_IP=${{ steps.output.outputs.ec2_public_ip }}" >> $GITHUB_ENV

      # Step 9: Set environment secrets for Docker Compose
      - name: Set Environment Variables for Docker Compose
        run: |
          echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
          echo POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} >> .env
          echo POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} >> .env
          echo DJANGO_SUPERUSER_USERNAME=${{ secrets.DJANGO_SUPERUSER_USERNAME }} >> .env
          echo DJANGO_SUPERUSER_PASSWORD=${{ secrets.DJANGO_SUPERUSER_PASSWORD }} >> .env
          echo DJANGO_SUPERUSER_EMAIL=${{ secrets.DJANGO_SUPERUSER_EMAIL }} >> .env
          echo EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }} >> .env

      # Step 10: Upload SSH Key to GitHub Secrets (Base64 Encoding)
      - name: Upload SSH Key to GitHub Secrets
        run: |
          # Encode private key to Base64
          base64 -w 0 MyAWSKey.pem > MyAWSKey.pem.base64

          # Set up GitHub Token and other variables
          GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
          REPO_OWNER=${{ github.repository_owner }}
          REPO_NAME=${{ github.repository }}
          SECRET_NAME="EC2_SSH_KEY"
          PRIVATE_KEY_PATH="MyAWSKey.pem.base64"

          # Read the Base64-encoded key
          PRIVATE_KEY=$(cat $PRIVATE_KEY_PATH)

          # Upload to GitHub Secrets
          curl -X PUT \
               -H "Authorization: token $GITHUB_TOKEN" \
               -H "Accept: application/vnd.github.v3+json" \
               -d '{"encrypted_value": "'"$PRIVATE_KEY"'"}' \
               "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/actions/secrets/$SECRET_NAME"

      # Step 11: Deploy Docker Compose Services
      - name: Deploy Docker Compose Services
        run: |
          # Use SSH Key stored in GitHub Secrets for the EC2 instance
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2_ssh_key.pem
          chmod 600 ec2_ssh_key.pem
          
          # Deploy Docker Compose on EC2 instance
          ssh -o StrictHostKeyChecking=no -i ec2_ssh_key.pem ubuntu@${{ env.EC2_IP }} << EOF
            docker-compose down
            docker-compose up -d
          EOF
          rm -f ec2_ssh_key.pem

      # Step 12: Post-deployment verification
      - name: Post-deploy Verification
        run: |
          echo "Deployment completed."
          echo "Application is available at http://${{ env.EC2_IP }}/"
